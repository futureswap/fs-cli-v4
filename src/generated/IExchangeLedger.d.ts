/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExchangeLedgerInterface extends ethers.utils.Interface {
  functions: {
    "amm()": FunctionFragment;
    "changePosition(address,int256,int256,int256,int256,uint256)": FunctionFragment;
    "exchangeState()": FunctionFragment;
    "getAmmPosition(int256,uint256)": FunctionFragment;
    "getPosition(address,int256,uint256)": FunctionFragment;
    "liquidate(address,address,int256,uint256)": FunctionFragment;
    "pausePrice()": FunctionFragment;
    "setAmm(address)": FunctionFragment;
    "setExchangeConfig(tuple)": FunctionFragment;
    "setExchangeState(uint8,int256)": FunctionFragment;
    "setHook(address)": FunctionFragment;
    "setTradeRouter(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "amm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePosition",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAmm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExchangeConfig",
    values: [
      {
        tradeFeeFraction: BigNumberish;
        timeFee: BigNumberish;
        maxLeverage: BigNumberish;
        minCollateral: BigNumberish;
        treasuryFraction: BigNumberish;
        dfrRate: BigNumberish;
        liquidatorFrac: BigNumberish;
        maxLiquidatorFee: BigNumberish;
        poolLiquidationFrac: BigNumberish;
        maxPoolLiquidationFee: BigNumberish;
        adlFeePercent: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setHook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTradeRouter",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "amm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTradeRouter",
    data: BytesLike
  ): Result;

  events: {
    "AmmAddressChanged(address,address)": EventFragment;
    "AmmAdl(int256,int256)": EventFragment;
    "ExchangeConfigChanged(tuple,tuple)": EventFragment;
    "ExchangeHookAddressChanged(address,address)": EventFragment;
    "ExchangeStateChanged(uint8,int256,uint8,int256)": EventFragment;
    "OnChangePositionHookFailed(string,tuple)": EventFragment;
    "PositionChanged(tuple)": EventFragment;
    "TradeRouterAddressChanged(address,address)": EventFragment;
    "TrancheAutoDeleveraged(uint8,uint32,int256,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmmAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmmAdl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeHookAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnChangePositionHookFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeRouterAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrancheAutoDeleveraged"): EventFragment;
}

export class IExchangeLedger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExchangeLedgerInterface;

  functions: {
    amm(overrides?: CallOverrides): Promise<[string]>;

    changePosition(
      trader: string,
      deltaStable: BigNumberish,
      deltaAsset: BigNumberish,
      stableBound: BigNumberish,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeState(overrides?: CallOverrides): Promise<[number]>;

    getAmmPosition(
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stableAmount: BigNumber;
        assetAmount: BigNumber;
      }
    >;

    getPosition(
      trader: string,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        asset: BigNumber;
        stable: BigNumber;
        trancheIdx: number;
      }
    >;

    liquidate(
      trader: string,
      liquidator: string,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeConfig(
      _config: {
        tradeFeeFraction: BigNumberish;
        timeFee: BigNumberish;
        maxLeverage: BigNumberish;
        minCollateral: BigNumberish;
        treasuryFraction: BigNumberish;
        dfrRate: BigNumberish;
        liquidatorFrac: BigNumberish;
        maxLiquidatorFee: BigNumberish;
        poolLiquidationFrac: BigNumberish;
        maxPoolLiquidationFee: BigNumberish;
        adlFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeState(
      _state: BigNumberish,
      _pausePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradeRouter(
      _tradeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  amm(overrides?: CallOverrides): Promise<string>;

  changePosition(
    trader: string,
    deltaStable: BigNumberish,
    deltaAsset: BigNumberish,
    stableBound: BigNumberish,
    oraclePrice: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeState(overrides?: CallOverrides): Promise<number>;

  getAmmPosition(
    price: BigNumberish,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { stableAmount: BigNumber; assetAmount: BigNumber }
  >;

  getPosition(
    trader: string,
    price: BigNumberish,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      asset: BigNumber;
      stable: BigNumber;
      trancheIdx: number;
    }
  >;

  liquidate(
    trader: string,
    liquidator: string,
    oraclePrice: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausePrice(overrides?: CallOverrides): Promise<BigNumber>;

  setAmm(
    _amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeConfig(
    _config: {
      tradeFeeFraction: BigNumberish;
      timeFee: BigNumberish;
      maxLeverage: BigNumberish;
      minCollateral: BigNumberish;
      treasuryFraction: BigNumberish;
      dfrRate: BigNumberish;
      liquidatorFrac: BigNumberish;
      maxLiquidatorFee: BigNumberish;
      poolLiquidationFrac: BigNumberish;
      maxPoolLiquidationFee: BigNumberish;
      adlFeePercent: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeState(
    _state: BigNumberish,
    _pausePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradeRouter(
    _tradeRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amm(overrides?: CallOverrides): Promise<string>;

    changePosition(
      trader: string,
      deltaStable: BigNumberish,
      deltaAsset: BigNumberish,
      stableBound: BigNumberish,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { to: string; amount: BigNumber })[], string]
    >;

    exchangeState(overrides?: CallOverrides): Promise<number>;

    getAmmPosition(
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stableAmount: BigNumber;
        assetAmount: BigNumber;
      }
    >;

    getPosition(
      trader: string,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        asset: BigNumber;
        stable: BigNumber;
        trancheIdx: number;
      }
    >;

    liquidate(
      trader: string,
      liquidator: string,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { to: string; amount: BigNumber })[], string]
    >;

    pausePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setAmm(_amm: string, overrides?: CallOverrides): Promise<void>;

    setExchangeConfig(
      _config: {
        tradeFeeFraction: BigNumberish;
        timeFee: BigNumberish;
        maxLeverage: BigNumberish;
        minCollateral: BigNumberish;
        treasuryFraction: BigNumberish;
        dfrRate: BigNumberish;
        liquidatorFrac: BigNumberish;
        maxLiquidatorFee: BigNumberish;
        poolLiquidationFrac: BigNumberish;
        maxPoolLiquidationFee: BigNumberish;
        adlFeePercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeState(
      _state: BigNumberish,
      _pausePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    setTradeRouter(
      _tradeRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmmAddressChanged(
      previousAmm?: null,
      newAmm?: null
    ): TypedEventFilter<
      [string, string],
      { previousAmm: string; newAmm: string }
    >;

    AmmAdl(
      deltaAsset?: null,
      deltaStable?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { deltaAsset: BigNumber; deltaStable: BigNumber }
    >;

    ExchangeConfigChanged(
      previousConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradeFeeFraction: BigNumber;
          timeFee: BigNumber;
          maxLeverage: BigNumber;
          minCollateral: BigNumber;
          treasuryFraction: BigNumber;
          dfrRate: BigNumber;
          liquidatorFrac: BigNumber;
          maxLiquidatorFee: BigNumber;
          poolLiquidationFrac: BigNumber;
          maxPoolLiquidationFee: BigNumber;
          adlFeePercent: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradeFeeFraction: BigNumber;
          timeFee: BigNumber;
          maxLeverage: BigNumber;
          minCollateral: BigNumber;
          treasuryFraction: BigNumber;
          dfrRate: BigNumber;
          liquidatorFrac: BigNumber;
          maxLiquidatorFee: BigNumber;
          poolLiquidationFrac: BigNumber;
          maxPoolLiquidationFee: BigNumber;
          adlFeePercent: BigNumber;
        }
      ],
      {
        previousConfig: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradeFeeFraction: BigNumber;
          timeFee: BigNumber;
          maxLeverage: BigNumber;
          minCollateral: BigNumber;
          treasuryFraction: BigNumber;
          dfrRate: BigNumber;
          liquidatorFrac: BigNumber;
          maxLiquidatorFee: BigNumber;
          poolLiquidationFrac: BigNumber;
          maxPoolLiquidationFee: BigNumber;
          adlFeePercent: BigNumber;
        };
        newConfig: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradeFeeFraction: BigNumber;
          timeFee: BigNumber;
          maxLeverage: BigNumber;
          minCollateral: BigNumber;
          treasuryFraction: BigNumber;
          dfrRate: BigNumber;
          liquidatorFrac: BigNumber;
          maxLiquidatorFee: BigNumber;
          poolLiquidationFrac: BigNumber;
          maxPoolLiquidationFee: BigNumber;
          adlFeePercent: BigNumber;
        };
      }
    >;

    ExchangeHookAddressChanged(
      previousHook?: null,
      newHook?: null
    ): TypedEventFilter<
      [string, string],
      { previousHook: string; newHook: string }
    >;

    ExchangeStateChanged(
      previousState?: null,
      previousPausePrice?: null,
      newState?: null,
      newPausePrice?: null
    ): TypedEventFilter<
      [number, BigNumber, number, BigNumber],
      {
        previousState: number;
        previousPausePrice: BigNumber;
        newState: number;
        newPausePrice: BigNumber;
      }
    >;

    OnChangePositionHookFailed(
      reason?: null,
      cpd?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          trader: string;
          liquidator: string;
          isClosing: boolean;
          deltaAsset: BigNumber;
          deltaStable: BigNumber;
          stableBound: BigNumber;
          oraclePrice: BigNumber;
          time: BigNumber;
          timeFeeCharged: BigNumber;
          dfrCharged: BigNumber;
          tradeFee: BigNumber;
          startAsset: BigNumber;
          startStable: BigNumber;
          totalAsset: BigNumber;
          totalStable: BigNumber;
          traderPayment: BigNumber;
          liquidatorPayment: BigNumber;
          treasuryPayment: BigNumber;
          executionPrice: BigNumber;
        }
      ],
      {
        reason: string;
        cpd: [
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          trader: string;
          liquidator: string;
          isClosing: boolean;
          deltaAsset: BigNumber;
          deltaStable: BigNumber;
          stableBound: BigNumber;
          oraclePrice: BigNumber;
          time: BigNumber;
          timeFeeCharged: BigNumber;
          dfrCharged: BigNumber;
          tradeFee: BigNumber;
          startAsset: BigNumber;
          startStable: BigNumber;
          totalAsset: BigNumber;
          totalStable: BigNumber;
          traderPayment: BigNumber;
          liquidatorPayment: BigNumber;
          treasuryPayment: BigNumber;
          executionPrice: BigNumber;
        };
      }
    >;

    PositionChanged(cpd?: null): TypedEventFilter<
      [
        [
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          trader: string;
          liquidator: string;
          isClosing: boolean;
          deltaAsset: BigNumber;
          deltaStable: BigNumber;
          stableBound: BigNumber;
          oraclePrice: BigNumber;
          time: BigNumber;
          timeFeeCharged: BigNumber;
          dfrCharged: BigNumber;
          tradeFee: BigNumber;
          startAsset: BigNumber;
          startStable: BigNumber;
          totalAsset: BigNumber;
          totalStable: BigNumber;
          traderPayment: BigNumber;
          liquidatorPayment: BigNumber;
          treasuryPayment: BigNumber;
          executionPrice: BigNumber;
        }
      ],
      {
        cpd: [
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          trader: string;
          liquidator: string;
          isClosing: boolean;
          deltaAsset: BigNumber;
          deltaStable: BigNumber;
          stableBound: BigNumber;
          oraclePrice: BigNumber;
          time: BigNumber;
          timeFeeCharged: BigNumber;
          dfrCharged: BigNumber;
          tradeFee: BigNumber;
          startAsset: BigNumber;
          startStable: BigNumber;
          totalAsset: BigNumber;
          totalStable: BigNumber;
          traderPayment: BigNumber;
          liquidatorPayment: BigNumber;
          treasuryPayment: BigNumber;
          executionPrice: BigNumber;
        };
      }
    >;

    TradeRouterAddressChanged(
      previousTradeRouter?: null,
      newTradeRouter?: null
    ): TypedEventFilter<
      [string, string],
      { previousTradeRouter: string; newTradeRouter: string }
    >;

    TrancheAutoDeleveraged(
      tranche?: null,
      trancheIdx?: null,
      assetADL?: null,
      stableADL?: null,
      totalTrancheShares?: null
    ): TypedEventFilter<
      [number, number, BigNumber, BigNumber, BigNumber],
      {
        tranche: number;
        trancheIdx: number;
        assetADL: BigNumber;
        stableADL: BigNumber;
        totalTrancheShares: BigNumber;
      }
    >;
  };

  estimateGas: {
    amm(overrides?: CallOverrides): Promise<BigNumber>;

    changePosition(
      trader: string,
      deltaStable: BigNumberish,
      deltaAsset: BigNumberish,
      stableBound: BigNumberish,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeState(overrides?: CallOverrides): Promise<BigNumber>;

    getAmmPosition(
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      trader: string,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      trader: string,
      liquidator: string,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeConfig(
      _config: {
        tradeFeeFraction: BigNumberish;
        timeFee: BigNumberish;
        maxLeverage: BigNumberish;
        minCollateral: BigNumberish;
        treasuryFraction: BigNumberish;
        dfrRate: BigNumberish;
        liquidatorFrac: BigNumberish;
        maxLiquidatorFee: BigNumberish;
        poolLiquidationFrac: BigNumberish;
        maxPoolLiquidationFee: BigNumberish;
        adlFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeState(
      _state: BigNumberish,
      _pausePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradeRouter(
      _tradeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changePosition(
      trader: string,
      deltaStable: BigNumberish,
      deltaAsset: BigNumberish,
      stableBound: BigNumberish,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmmPosition(
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      trader: string,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      trader: string,
      liquidator: string,
      oraclePrice: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeConfig(
      _config: {
        tradeFeeFraction: BigNumberish;
        timeFee: BigNumberish;
        maxLeverage: BigNumberish;
        minCollateral: BigNumberish;
        treasuryFraction: BigNumberish;
        dfrRate: BigNumberish;
        liquidatorFrac: BigNumberish;
        maxLiquidatorFee: BigNumberish;
        poolLiquidationFrac: BigNumberish;
        maxPoolLiquidationFee: BigNumberish;
        adlFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeState(
      _state: BigNumberish,
      _pausePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradeRouter(
      _tradeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}