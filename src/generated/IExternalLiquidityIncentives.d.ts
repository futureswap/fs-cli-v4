/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExternalLiquidityIncentivesInterface extends ethers.utils.Interface {
  functions: {
    "accountants(address)": FunctionFragment;
    "addAccountant(tuple)": FunctionFragment;
    "adjustIncentives(uint64,uint64,bool,tuple[])": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimableTokens(address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "removeAccountant(address)": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "tokenLocker()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountants", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAccountant",
    values: [{ accountant: string; permissions: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustIncentives",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      { provider: string; amount: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAccountant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLocker",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLocker",
    data: BytesLike
  ): Result;

  events: {
    "AccountantAdded(address,uint8)": EventFragment;
    "AccountantRemoved(address)": EventFragment;
    "IncentivesAdded(address,uint256,bool,bytes20,tuple[])": EventFragment;
    "IncentivesAdjusted(address,uint256,bool,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountantAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountantRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentivesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentivesAdjusted"): EventFragment;
}

export class IExternalLiquidityIncentives extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExternalLiquidityIncentivesInterface;

  functions: {
    accountants(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAccountant(
      info: { accountant: string; permissions: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustIncentives(
      intervalStart: BigNumberish,
      intervalEnd: BigNumberish,
      intervalLast: boolean,
      adjustments: { provider: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      lockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableTokens(
      liquidityProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAccountant(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    tokenLocker(overrides?: CallOverrides): Promise<[string]>;
  };

  accountants(
    accountant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAccountant(
    info: { accountant: string; permissions: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustIncentives(
    intervalStart: BigNumberish,
    intervalEnd: BigNumberish,
    intervalLast: boolean,
    adjustments: { provider: string; amount: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    lockupTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableTokens(
    liquidityProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onTokenTransfer(
    _from: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAccountant(
    accountant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  tokenLocker(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountants(accountant: string, overrides?: CallOverrides): Promise<number>;

    addAccountant(
      info: { accountant: string; permissions: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    adjustIncentives(
      intervalStart: BigNumberish,
      intervalEnd: BigNumberish,
      intervalLast: boolean,
      adjustments: { provider: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(lockupTime: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimableTokens(
      liquidityProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAccountant(
      accountant: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    tokenLocker(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AccountantAdded(
      accountant?: string | null,
      permimssion?: null
    ): TypedEventFilter<
      [string, number],
      { accountant: string; permimssion: number }
    >;

    AccountantRemoved(
      accountant?: string | null
    ): TypedEventFilter<[string], { accountant: string }>;

    IncentivesAdded(
      accountant?: string | null,
      interval?: BigNumberish | null,
      intervalLast?: boolean | null,
      scriptSha?: null,
      additions?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        boolean,
        string,
        ([string, BigNumber] & { provider: string; amount: BigNumber })[]
      ],
      {
        accountant: string;
        interval: BigNumber;
        intervalLast: boolean;
        scriptSha: string;
        additions: ([string, BigNumber] & {
          provider: string;
          amount: BigNumber;
        })[];
      }
    >;

    IncentivesAdjusted(
      accountant?: string | null,
      interval?: BigNumberish | null,
      intervalLast?: boolean | null,
      adjustments?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        boolean,
        ([string, BigNumber] & { provider: string; amount: BigNumber })[]
      ],
      {
        accountant: string;
        interval: BigNumber;
        intervalLast: boolean;
        adjustments: ([string, BigNumber] & {
          provider: string;
          amount: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    accountants(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAccountant(
      info: { accountant: string; permissions: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustIncentives(
      intervalStart: BigNumberish,
      intervalEnd: BigNumberish,
      intervalLast: boolean,
      adjustments: { provider: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      lockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableTokens(
      liquidityProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAccountant(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLocker(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountants(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAccountant(
      info: { accountant: string; permissions: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustIncentives(
      intervalStart: BigNumberish,
      intervalEnd: BigNumberish,
      intervalLast: boolean,
      adjustments: { provider: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      lockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableTokens(
      liquidityProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAccountant(
      accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
